{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/arjunmallireddy/arjunmallireddy/blob/master/mallikarjun\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SygDGhdvvFu3",
        "colab_type": "code",
        "outputId": "6478412a-a415-4a55-e9fe-591d834b66f1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def printEven(n):\n",
        "  cnt=0;\n",
        "  sum=0;\n",
        "  while(cnt!=n):\n",
        "    if(cnt%2==0):\n",
        "      sum=sum+cnt;\n",
        "    cnt=cnt+1;\n",
        "  return sum;  \n",
        "print(printEven(20));    "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "90\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MSlRNgyb_mO9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4bX3Ta1v3OJe",
        "colab_type": "text"
      },
      "source": [
        "factors list of a given number\n",
        "18 - - - - - -1 2 3 4 6 9"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9idHT-OE4f_W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "clPyJz3v3htF",
        "colab_type": "code",
        "outputId": "9d9791ef-d2f0-45f8-abea-4a91e80c2328",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def factorslist(n):\n",
        "  i=1\n",
        "  while(i!=n):\n",
        "    if(n%i==0):\n",
        "      print(i,end=\" \")\n",
        "    i=i+1\n",
        "  return\n",
        "factorslist(18)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 2 3 6 9 "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_zcm5xJyLbC",
        "colab_type": "text"
      },
      "source": [
        "# LIST IN PYTHON\n",
        "\n",
        "==>list can be written in python with [ ] and each itemin the list is separated by , operator. \n",
        "\n",
        "==>list can be anything-->int,char,float,string."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QSlE8BnX-vQa",
        "colab_type": "text"
      },
      "source": [
        "##List Methods:\n",
        " \n",
        " ####append(obj)\n",
        " \n",
        " ==> The method appends apassed object intoa existing list.\n",
        " \n",
        " ####count(obj)\n",
        " \n",
        " ==>The method returns the count of object how many times in the list.\n",
        " \n",
        " ###index(obj)\n",
        " \n",
        " ==>its return the index of passed objects 1st occurance from left side\n",
        " \n",
        " ###insert(index,obj)\n",
        " \n",
        " ==>the insert inserts the passed object at certain index."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JGFlTWJM2BqX",
        "colab_type": "code",
        "outputId": "7d8f1547-f03f-41d9-ed4d-008a31cbb960",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        }
      },
      "source": [
        "list=[\"rakeshprabhas\",\"yuvraj\",\"sonuzombieMG\",18]\n",
        "for x in list:\n",
        "  print(x)\n",
        "  \n",
        "del list[3]\n",
        "print(list)\n",
        "\n",
        "list[2]=\"vasu\"\n",
        "print(list)\n",
        "\n",
        "print(len(list))\n",
        "\n",
        "list.append(9)\n",
        "print(list)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "rakeshprabhas\n",
            "yuvraj\n",
            "sonuzombieMG\n",
            "18\n",
            "['rakeshprabhas', 'yuvraj', 'sonuzombieMG']\n",
            "['rakeshprabhas', 'yuvraj', 'vasu']\n",
            "3\n",
            "['rakeshprabhas', 'yuvraj', 'vasu', 9]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cIdRwLi_9uP5",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SVZwur001Igx",
        "colab_type": "code",
        "outputId": "69927cb8-39d9-491a-ab74-3d8b81e307c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        }
      },
      "source": [
        "lst1=[1,2,3,4,5,6,7,8,9]\n",
        "for x in lst1:\n",
        "  print(x,end = \"  \")\n",
        "print()\n",
        "print(lst1[2:-2])\n",
        "print(lst1[::2])\n",
        "print(lst1[::-2])\n",
        "print(lst1[-1])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1  2  3  4  5  6  7  8  9  \n",
            "[3, 4, 5, 6, 7]\n",
            "[1, 3, 5, 7, 9]\n",
            "[9, 7, 5, 3, 1]\n",
            "9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pLrr-VYQ48U6",
        "colab_type": "text"
      },
      "source": [
        "##list with range() function.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-diug3vW5PsZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def linearExample(a):\n",
        "  sum=0\n",
        "  for i in range(len(a)):\n",
        "    if a[i]%3==0 and a[i]%5==0:\n",
        "      sum=sum+a[i]\n",
        "  return sum \n",
        "a=[1,2,3,4,5,15]\n",
        "print(linearExample(a))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yYBY05mQ6IZt",
        "colab_type": "code",
        "outputId": "88c492d2-a546-40f6-ba23-63b7b6c944fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        }
      },
      "source": [
        "def linearFormatedoutput(a): \n",
        "  for i in range(len(a)):\n",
        "      if i==0 or (i==len(a)-1):\n",
        "          print(a[i])\n",
        "      elif a[i-1]%2==0 and a[i+1]%2==0:\n",
        "          print(a[i])\n",
        "a=[1,6,9,4,16,19,22]        \n",
        "linearFormatedoutput(a) \n",
        "  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "9\n",
            "19\n",
            "22\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FPJzazpXLLbk",
        "colab_type": "text"
      },
      "source": [
        "##Number To LIst Conversion\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "skHryWy6BIM0",
        "colab_type": "code",
        "outputId": "f40c83e7-5abe-4fa4-9305-e1172dd52019",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "def numberToListConversion(n):\n",
        "  lst=[]\n",
        "  while n!=0:\n",
        "    r=n%10\n",
        "    lst.append(r)\n",
        "    n=n//10\n",
        "  lst.reverse()\n",
        "  print(lst)\n",
        "  \n",
        "n=int(input(\"enter a number\"))\n",
        "numberToListConversion(n)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a number9000091909\n",
            "[9, 0, 0, 0, 0, 9, 1, 9, 0, 9]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d9KLJ0ziJ3rF",
        "colab_type": "text"
      },
      "source": [
        "##List to Number Conversion\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ynHQpxgQKEgk",
        "colab_type": "code",
        "outputId": "ae3a932a-6cd3-4d63-b2e9-a2c0f355d44b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "lst=[9,0,0,0,0,9,1,9,0,9]\n",
        "for i in lst:\n",
        "  print(i,end=\"\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "9000091909"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U97AfjLNVl20",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsgSdCn41ini",
        "colab_type": "text"
      },
      "source": [
        "##Binary Search\n",
        "\n",
        "==> can be appiled on sorted list , unique list .\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TKd8beKZ13Mf",
        "colab_type": "code",
        "outputId": "68039e66-2239-4dbb-9281-9f50ecef988a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def binarysearch(a,lindex,rindex,taritem):\n",
        "  while lindex <= rindex:\n",
        "    mindex = lindex+(rindex-lindex)//2\n",
        "    if a[mindex]==taritem:\n",
        "      return mindex\n",
        "    if a[mindex]> taritem:\n",
        "      rindex=mindex-1\n",
        "    else:\n",
        "      lindex=mindex+1\n",
        "  return-1\n",
        "list1=[1,4,9,15,25,45,57,88,98]\n",
        "res=binarysearch(list1,0,8,18)\n",
        "if res!=-1:\n",
        "  print(\"item is found\")\n",
        "else:\n",
        "  print(\"item is not found\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "item is not found\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sJbXQjEs-UBo",
        "colab_type": "text"
      },
      "source": [
        "##Bubble Sort\n",
        "\n",
        "==>  it compares the adj items,if 1st item is > the 2nd item then there would reguired to swap the items.\n",
        "\n",
        "the complex = n*n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d2Hsza_L-68x",
        "colab_type": "code",
        "outputId": "8ed7acda-9592-4fec-c7af-13f30a21ca8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def bubblesort(a):\n",
        "  for i in range(len(a)-1):\n",
        "    for j in range(len(a)-1):\n",
        "      if a[j]>a[j+1]:\n",
        "        a[j],a[j+1]=a[j+1],a[j]\n",
        "  for i in range(len(a)):\n",
        "     print(a[i],end=\" \")\n",
        "lst1=[19,1,25,6,18,3]\n",
        "bubblesort(lst1)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 3 6 18 19 25 "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTQzDqKMCMRn",
        "colab_type": "text"
      },
      "source": [
        "##Strings in Python\n",
        "\n",
        "==> a string is a list of characters.\n",
        "the conversion of character to a number is happens with \"ASCII\" number. \n",
        "\n",
        "  @ A - Z ==== 65 - 90\n",
        "\n",
        "@  a - z ====  97 - 122\n",
        "\n",
        "@  0 - 9 ==== 48 - 57"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g6FvDYOzDpqo",
        "colab_type": "code",
        "outputId": "c652a477-16df-4cde-e39e-231ef0192fb3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156
        }
      },
      "source": [
        "# creating a string\n",
        "str = \"application\"\n",
        "print(str)\n",
        " \n",
        "Untitled0.ipynb\n",
        "Untitled0.ipynb_\n",
        "[ ]\n",
        "def printEven(n):\n",
        "  cnt=0;\n",
        "  sum=0;\n",
        "  while(cnt!=n):\n",
        "    if(cnt%2==0):\n",
        "      sum=sum+cnt;\n",
        "    cnt=cnt+1;\n",
        "  return sum;  \n",
        "print(printEven(20));    \n",
        "\n",
        "[ ]\n",
        "​\n",
        "factors list of a given number 18 - - - - - -1 2 3 4 6 9\n",
        "\n",
        "[ ]\n",
        "​\n",
        "[ ]\n",
        "def factorslist(n):\n",
        "  i=1\n",
        "  while(i!=n):\n",
        "    if(n%i==0):\n",
        "      print(i,end=\" \")\n",
        "    i=i+1\n",
        "  return\n",
        "factorslist(18)\n",
        "\n",
        "LIST IN PYTHON\n",
        "==>list can be written in python with [ ] and each itemin the list is separated by , operator.\n",
        "\n",
        "==>list can be anything-->int,char,float,string.\n",
        "\n",
        "List Methods:\n",
        "####append(obj)\n",
        "\n",
        "==> The method appends apassed object intoa existing list.\n",
        "\n",
        "####count(obj)\n",
        "\n",
        "==>The method returns the count of object how many times in the list.\n",
        "\n",
        "###index(obj)\n",
        "\n",
        "==>its return the index of passed objects 1st occurance from left side\n",
        "\n",
        "###insert(index,obj)\n",
        "\n",
        "==>the insert inserts the passed object at certain index.\n",
        "\n",
        "[ ]\n",
        "list=[\"rakeshprabhas\",\"yuvraj\",\"sonuzombieMG\",18]\n",
        "for x in list:\n",
        "  print(x)\n",
        "  \n",
        "del list[3]\n",
        "print(list)\n",
        "​\n",
        "list[2]=\"vasu\"\n",
        "print(list)\n",
        "​\n",
        "print(len(list))\n",
        "​\n",
        "list.append(9)\n",
        "print(list)\n",
        "Double-click (or enter) to edit\n",
        "\n",
        "[ ]\n",
        "lst1=[1,2,3,4,5,6,7,8,9]\n",
        "for x in lst1:\n",
        "  print(x,end = \"  \")\n",
        "print()\n",
        "print(lst1[2:-2])\n",
        "print(lst1[::2])\n",
        "print(lst1[::-2])\n",
        "print(lst1[-1])\n",
        "​\n",
        "​\n",
        "list with range() function.\n",
        "[ ]\n",
        "def linearExample(a):\n",
        "  sum=0\n",
        "  for i in range(len(a)):\n",
        "    if a[i]%3==0 and a[i]%5==0:\n",
        "      sum=sum+a[i]\n",
        "  return sum \n",
        "a=[1,2,3,4,5,15]\n",
        "print(linearExample(a))\n",
        "[ ]\n",
        "def linearFormatedoutput(a): \n",
        "  for i in range(len(a)):\n",
        "      if i==0 or (i==len(a)-1):\n",
        "          print(a[i])\n",
        "      elif a[i-1]%2==0 and a[i+1]%2==0:\n",
        "          print(a[i])\n",
        "a=[1,6,9,4,16,19,22]        \n",
        "linearFormatedoutput(a) \n",
        "  \n",
        "Number To LIst Conversion\n",
        "[ ]\n",
        "def numberToListConversion(n):\n",
        "  lst=[]\n",
        "  while n!=0:\n",
        "    r=n%10\n",
        "    lst.append(r)\n",
        "    n=n//10\n",
        "  lst.reverse()\n",
        "  print(lst)\n",
        "  \n",
        "n=int(input(\"enter a number\"))\n",
        "numberToListConversion(n)\n",
        "List to Number Conversion\n",
        "[ ]\n",
        "lst=[9,0,0,0,0,9,1,9,0,9]\n",
        "for i in lst:\n",
        "  print(i,end=\"\")\n",
        "[ ]\n",
        "​\n",
        "Binary Search\n",
        "==> can be appiled on sorted list , unique list .\n",
        "\n",
        "[ ]\n",
        "def binarysearch(a,lindex,rindex,taritem):\n",
        "  while lindex <= rindex:\n",
        "    mindex = lindex+(rindex-lindex)//2\n",
        "    if a[mindex]==taritem:\n",
        "      return mindex\n",
        "    if a[mindex]> taritem:\n",
        "      rindex=mindex-1\n",
        "    else:\n",
        "      lindex=mindex+1\n",
        "  return-1\n",
        "list1=[1,4,9,15,25,45,57,88,98]\n",
        "res=binarysearch(list1,0,8,18)\n",
        "if res!=-1:\n",
        "  print(\"item is found\")\n",
        "else:\n",
        "  print(\"item is not found\")\n",
        "Bubble Sort\n",
        "==> it compares the adj items,if 1st item is > the 2nd item then there would reguired to swap the items.\n",
        "\n",
        "the complex = n*n\n",
        "\n",
        "[ ]\n",
        "def bubblesort(a):\n",
        "  for i in range(len(a)-1):\n",
        "    for j in range(len(a)-1):\n",
        "      if a[j]>a[j+1]:\n",
        "        a[j],a[j+1]=a[j+1],a[j]\n",
        "  for i in range(len(a)):\n",
        "     print(a[i],end=\" \")\n",
        "lst1=[19,1,25,6,18,3]\n",
        "bubblesort(lst1)\n",
        "​\n",
        "\n",
        "Strings in Python\n",
        "==> a string is a list of characters. the conversion of character to a number is happens with \"ASCII\" number.\n",
        "\n",
        "@ A - Z ==== 65 - 90\n",
        "\n",
        "@ a - z ==== 97 - 122\n",
        "\n",
        "@ 0 - 9 ==== 48 - 57\n",
        "\n",
        "[ ]\n",
        "# creating a string\n",
        "str = \"application\"\n",
        "print(str)\n",
        " \n",
        "str1='application'\n",
        "print(str1)\n",
        "​\n",
        "str2=\"\"\" application test\n",
        "         working\n",
        "         completed\n",
        "         list\n",
        "         string\n",
        "         python\"\"\"\n",
        "print(str2)\n",
        "\n",
        "[ ]\n",
        "str= \"application\"\n",
        "print(str)\n",
        "print(\"str[0]=\",str[0])\n",
        "print(\"str[1]=\",str[1])\n",
        "print(\"str[-1]=\",str[-1])\n",
        "print(\"str[-3]=\",str[-3])\n",
        "print(\"str[1:5]=\",str[1:5])\n",
        "print(\"str[:5]=\",str[:5])\n",
        "print(\"str[:-5]=\",str[:-5])\n",
        "print(\"str[5:-2]=\",str[5:-2])\n",
        "print(\"str[::-1]=\",str[::-1])\n",
        "​\n",
        "\n",
        "Print of digits in a string\n",
        "[ ]\n",
        "def sumofdigits(str):\n",
        "  sum=0\n",
        "  lst=list(str)\n",
        "  for x in range(len(lst)):\n",
        "    if ord(lst[x])>=48 and ord(lst[x])<=57:\n",
        "      sum=sum+ord(lst[x])-48\n",
        "  return sum\n",
        "sumofdigits(\"application1889\")\n",
        "    \n",
        "\n",
        "[ ]\n",
        "def sumonlyevendigits(str):\n",
        "  sum=0\n",
        "  lst=list(str)\n",
        "  for x in range(len(lst)):\n",
        "    if ord(lst[x])>=48 and ord(lst[x])<=57:\n",
        "      ac=ord(lst[x])-48\n",
        "      if(ac%2==0):\n",
        "        sum=sum+ac\n",
        "  return sum\n",
        "print(sumonlyevendigits(\"application1889\"))\n",
        "print(sumonlyevendigits(\"te1574s69t\"))\n",
        "[ ]\n",
        "​\n",
        "string function\n",
        "==> upper()- - - - returns string which all the characters into upper case .\n",
        "\n",
        "==>lower()- - - - returns string which all the characters into lower case .\n",
        "\n",
        "[ ]\n",
        "str=\"arjun\"\n",
        "print(str.upper())\n",
        "print(str.lower())\n",
        "\n",
        "Boolean methods\n",
        "==>islower - - - method returns the output either true or false . if it is true the given character is lower case and if not it return false\n",
        "\n",
        "[ ]\n",
        "s=\"application\"\n",
        "s1=\"ARJUN\"\n",
        "print(s.isupper())\n",
        "print(s1.isupper())\n",
        "\n",
        "[ ]\n",
        "s=\"python\"\n",
        "s1=\" \"\n",
        "print(s.isspace())\n",
        "print(s1.isspace())\n",
        "\n",
        "string methods\n",
        "join() - - - - : method to conncatinate 2 strings\n",
        "2.split() - - - - :returns the list of strings that are separated by white space\n",
        "\n",
        "3.replace() -- - : replace the original string with other styring\n",
        "\n",
        "[ ]\n",
        "str=\"PYTHON\"\n",
        "print(\" \".join(str))\n",
        "\n",
        "[ ]\n",
        "s=\"python , programming , learn\"\n",
        "​\n",
        "print(s.split())\n",
        "​\n",
        "print(s.split(\"a\"))\n",
        "\n",
        "[ ]\n",
        "s=\"mallikarjun reddy\"\n",
        "print(s.replace(\"karjun\",\"arjun\"))\n",
        "\n",
        "Tuples\n",
        "A tuple is a seq of set of objects is like only.\n",
        "\n",
        "Diff of list and tuples are , the tuples cannot be changed unlike list.\n",
        "\n",
        "List will use [ ] to hold objects.\n",
        "\n",
        "Tuples will use ( ) to hold objects.\n",
        "\n",
        "[ ]\n",
        "t1=(\"python\",\"programming\",1989,2019,\"machine learning\",\"AI\")\n",
        "print(\"t1[0]=\",t1[0])\n",
        "print(\"t1[-1]=\",t1[-1])\n",
        "print(\"t1[:1]=\",t1[:1])\n",
        "print(\"t1[2]=\",t1[2])\n",
        "\n",
        "[ ]\n",
        "contacts = {}\n",
        "def addcontact(name,phone):\n",
        "  if name not in contacts:\n",
        "    contacts[name] = phone\n",
        "    print(\"contacts %s added\"% name);\n",
        "  else:\n",
        "      print(\"contact %s already exists\"% name);\n",
        "  return\n",
        "addcontact(\"customer care idea\",9640964599)\n",
        "addcontact(\"customer care jio\",9640964599)\n",
        "addcontact(\"customer care sarooja\",8919707971)\n",
        "​\n",
        "[ ]\n",
        "#search for a particular contact from contact list\n",
        "​\n",
        "def searchcontact(name):\n",
        "  if name in contacts:\n",
        "    print(name,\":\",contacts[name])\n",
        "  else:\n",
        "    print(\"%s does not exits\"%name)\n",
        "  return  \n",
        "searchcontact(\"customer care sarooja\")\n",
        "[ ]\n",
        "def importcontacts(newcontacts):\n",
        "  contacts.update(newcontacts)\n",
        "  print(len(newcontacts.keys()),\"contacts added successfully\");\n",
        "  return\n",
        "newcontacts = {'dinesh':9999999999,'akhil':8888888888}\n",
        "importcontacts(newcontacts)\n",
        "print(contacts)\n",
        "[ ]\n",
        "def deletecontacts(name):\n",
        "    if name in contacts:\n",
        "        del contacts[name]\n",
        "        print(name,\": is deleted from the contacts\");\n",
        "    else:\n",
        "        print(name,\"is not exists in the contacts\");\n",
        "    return\n",
        "deletecontacts(\"akhil\")\n",
        "deletecontacts(\"anil\")\n",
        "print(contacts)\n",
        "[ ]\n",
        "def updateContact(name,phone):\n",
        "  if name in contacts:\n",
        "    contacts[name]=phone\n",
        "    print(name,\":updated with new phone number\")\n",
        "  else:\n",
        "    print(name,\"not exist in the contacts\")\n",
        "  return\n",
        "updateContact(\"dinesh\",9632587412)\n",
        "print(contacts)\n",
        "\n",
        "package and Modules\n",
        "** package;- collection of modules ** sub packages;- its part of main package module a single pythin file contains set of opperations(functions)\n",
        "\n",
        "*package---->sub-package->modules-->functions\n",
        "\n",
        "[ ]\n",
        "from math import floor as f1\n",
        "f1(123.456)\n",
        "​\n",
        "\n",
        "[ ]\n",
        "from math import floor as f1\n",
        "f1(123.456)\n",
        "​\n",
        "\n",
        "[ ]\n",
        "import math\n",
        "math.factorial(5)\n",
        "​\n",
        "[ ]\n",
        "import random\n",
        "def generaterandomnumbers(n,lb,ub):\n",
        "    for i in range(0,n):\n",
        "      print(random.randint(lb,ub),end=\" \");\n",
        "    return\n",
        "generaterandomnumbers(10,25,200)\n",
        "​\n",
        "Laying out notebook...\n",
        "str1='application'\n",
        "print(str1)\n",
        "\n",
        "str2=\"\"\" application test\n",
        "         working\n",
        "         completed\n",
        "         list\n",
        "         string\n",
        "         python\"\"\"\n",
        "print(str2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "application\n",
            "application\n",
            " application test\n",
            "         working\n",
            "         completed\n",
            "         list\n",
            "         string\n",
            "         python\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nvIsEjdbFU1h",
        "colab_type": "code",
        "outputId": "29baaffa-dd0d-42ca-fa12-cf7b100d3c14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        }
      },
      "source": [
        "str= \"application\"\n",
        "print(str)\n",
        "print(\"str[0]=\",str[0])\n",
        "print(\"str[1]=\",str[1])\n",
        "print(\"str[-1]=\",str[-1])\n",
        "print(\"str[-3]=\",str[-3])\n",
        "print(\"str[1:5]=\",str[1:5])\n",
        "print(\"str[:5]=\",str[:5])\n",
        "print(\"str[:-5]=\",str[:-5])\n",
        "print(\"str[5:-2]=\",str[5:-2])\n",
        "print(\"str[::-1]=\",str[::-1])\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "application\n",
            "str[0]= a\n",
            "str[1]= p\n",
            "str[-1]= n\n",
            "str[-3]= i\n",
            "str[1:5]= ppli\n",
            "str[:5]= appli\n",
            "str[:-5]= applic\n",
            "str[5:-2]= cati\n",
            "str[::-1]= noitacilppa\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L_I-LM6v1lmv",
        "colab_type": "text"
      },
      "source": [
        "#Print of digits in a string\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sUGPLBym1qe1",
        "colab_type": "code",
        "outputId": "c4c0d32a-1fd5-4837-e4b6-b82ae3c0d486",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def sumofdigits(str):\n",
        "  sum=0\n",
        "  lst=list(str)\n",
        "  for x in range(len(lst)):\n",
        "    if ord(lst[x])>=48 and ord(lst[x])<=57:\n",
        "      sum=sum+ord(lst[x])-48\n",
        "  return sum\n",
        "sumofdigits(\"application1889\")\n",
        "    "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "26"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mt5MOlh96vDF",
        "colab_type": "code",
        "outputId": "8d2b7f40-f01c-4c12-c70d-5774b23dcdad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "def sumonlyevendigits(str):\n",
        "  sum=0\n",
        "  lst=list(str)\n",
        "  for x in range(len(lst)):\n",
        "    if ord(lst[x])>=48 and ord(lst[x])<=57:\n",
        "      ac=ord(lst[x])-48\n",
        "      if(ac%2==0):\n",
        "        sum=sum+ac\n",
        "  return sum\n",
        "print(sumonlyevendigits(\"application1889\"))\n",
        "print(sumonlyevendigits(\"te1574s69t\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "16\n",
            "10\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpUEMLxXJFob",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ReeSqHAu4LS2",
        "colab_type": "text"
      },
      "source": [
        "#string function\n",
        "\n",
        "==> upper()- -  - - returns string which all the characters into upper case .\n",
        "\n",
        "==>lower()-  - - - returns string which all the characters into lower case ."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0K3m-Ur745Te",
        "colab_type": "code",
        "outputId": "93326bba-80f3-4bc6-beb5-5a92f87f509c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "str=\"arjun\"\n",
        "print(str.upper())\n",
        "print(str.lower())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ARJUN\n",
            "arjun\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b788AUHn5UwV",
        "colab_type": "text"
      },
      "source": [
        "#Boolean methods\n",
        "\n",
        "==>islower - -  - method returns the output either true or false . \n",
        "                            if it is true the given character is lower case and if not it return false     "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hdi-A9ad6A1l",
        "colab_type": "code",
        "outputId": "78707104-ee8f-4698-d0d4-6b4d10ee909d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "s=\"application\"\n",
        "s1=\"ARJUN\"\n",
        "print(s.isupper())\n",
        "print(s1.isupper())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wfgb9_VHAAzz",
        "colab_type": "code",
        "outputId": "4957ab29-8af2-40fe-9dd2-cdf18a116483",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "s=\"python\"\n",
        "s1=\" \"\n",
        "print(s.isspace())\n",
        "print(s1.isspace())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tGLtlifUA2te",
        "colab_type": "text"
      },
      "source": [
        "# string methods\n",
        "\n",
        "1. join() - - - - : method to conncatinate 2 strings \n",
        "\n",
        "2.split() - - - - :returns the list of strings that are separated by white space\n",
        "\n",
        "3.replace()  -- - : replace the original string with other styring"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kz0mGbV2AUX0",
        "colab_type": "code",
        "outputId": "65b78ce1-2825-4f73-8027-666ce266c1df",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "str=\"PYTHON\"\n",
        "print(\" \".join(str))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "P Y T H O N\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UEK_3-4JAoyN",
        "colab_type": "code",
        "outputId": "9a0d0866-8df1-4967-9a4a-2c580864f808",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "s=\"python , programming , learn\"\n",
        "\n",
        "print(s.split())\n",
        "\n",
        "print(s.split(\"a\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['python', ',', 'programming', ',', 'learn']\n",
            "['python , progr', 'mming , le', 'rn']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R_lFoIOhEElF",
        "colab_type": "code",
        "outputId": "1a7f91e1-9c14-4a01-ca86-f6a7dc5d8de2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "s=\"mallikarjun reddy\"\n",
        "print(s.replace(\"karjun\",\"arjun\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "malliarjun reddy\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HKIFrIbqKDQF",
        "colab_type": "text"
      },
      "source": [
        "# Tuples\n",
        "\n",
        "A tuple is a seq of set of objects is  like only.\n",
        " \n",
        "Diff of list and tuples are , the tuples cannot be changed unlike list.\n",
        " \n",
        " List will use [ ] to hold objects.\n",
        " \n",
        " Tuples will use ( ) to hold objects.\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UaI78BiyKQ8W",
        "colab_type": "code",
        "outputId": "d875ec75-7896-4677-e8d4-ff43c10bb0d3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        }
      },
      "source": [
        "t1=(\"python\",\"programming\",1989,2019,\"machine learning\",\"AI\")\n",
        "print(\"t1[0]=\",t1[0])\n",
        "print(\"t1[-1]=\",t1[-1])\n",
        "print(\"t1[:1]=\",t1[:1])\n",
        "print(\"t1[2]=\",t1[2])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "t1[0]= python\n",
            "t1[-1]= AI\n",
            "t1[:1]= ('python',)\n",
            "t1[2]= 1989\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y6pKKjzeBZyq",
        "colab_type": "code",
        "outputId": "a5b4f5ca-6c24-4033-af47-f95e72a04894",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "contacts = {}\n",
        "def addcontact(name,phone):\n",
        "  if name not in contacts:\n",
        "    contacts[name] = phone\n",
        "    print(\"contacts %s added\"% name);\n",
        "  else:\n",
        "      print(\"contact %s already exists\"% name);\n",
        "  return\n",
        "addcontact(\"customer care idea\",9640964599)\n",
        "addcontact(\"customer care jio\",9640964599)\n",
        "addcontact(\"customer care sarooja\",8919707971)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "contacts customer care idea added\n",
            "contacts customer care jio added\n",
            "contacts customer care sarooja added\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OccgmgHV_o0o",
        "colab_type": "code",
        "outputId": "dc402c3d-a3eb-4414-b1b7-b59e1ae65c2d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "#search for a particular contact from contact list\n",
        "\n",
        "def searchcontact(name):\n",
        "  if name in contacts:\n",
        "    print(name,\":\",contacts[name])\n",
        "  else:\n",
        "    print(\"%s does not exits\"%name)\n",
        "  return  \n",
        "searchcontact(\"customer care sarooja\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "customer care sarooja : 8919707971\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-dpzGUIyFH4C",
        "colab_type": "code",
        "outputId": "498ded33-b382-4697-c7f0-9e3be93d31d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        }
      },
      "source": [
        "def importcontacts(newcontacts):\n",
        "  contacts.update(newcontacts)\n",
        "  print(len(newcontacts.keys()),\"contacts added successfully\");\n",
        "  return\n",
        "newcontacts = {'dinesh':9999999999,'akhil':8888888888}\n",
        "importcontacts(newcontacts)\n",
        "print(contacts)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2 contacts added successfully\n",
            "{'customer care idea': 9640964599, 'customer care jio': 9640964599, 'customer care sarooja': 8919707971, 'dinesh': 9999999999, 'akhil': 8888888888}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fcOQw-9SGIxB",
        "colab_type": "code",
        "outputId": "a00a8e02-fe80-4cf0-c09a-500b4990649f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "source": [
        "def deletecontacts(name):\n",
        "    if name in contacts:\n",
        "        del contacts[name]\n",
        "        print(name,\": is deleted from the contacts\");\n",
        "    else:\n",
        "        print(name,\"is not exists in the contacts\");\n",
        "    return\n",
        "deletecontacts(\"akhil\")\n",
        "deletecontacts(\"anil\")\n",
        "print(contacts)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "akhil is not exists in the contacts\n",
            "anil is not exists in the contacts\n",
            "{'customer care idea': 9640964599, 'customer care jio': 9640964599, 'customer care sarooja': 8919707971, 'dinesh': 9999999999}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rlBTAaBzJIZy",
        "colab_type": "code",
        "outputId": "d8bb9b98-96cf-45c6-fea8-9c9cc7e07de2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        }
      },
      "source": [
        "def updateContact(name,phone):\n",
        "  if name in contacts:\n",
        "    contacts[name]=phone\n",
        "    print(name,\":updated with new phone number\")\n",
        "  else:\n",
        "    print(name,\"not exist in the contacts\")\n",
        "  return\n",
        "updateContact(\"dinesh\",9632587412)\n",
        "print(contacts)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dinesh :updated with new phone number\n",
            "{'customer care idea': 9640964599, 'customer care jio': 9640964599, 'customer care sarooja': 8919707971, 'dinesh': 9632587412, 'akhil': 8888888888}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8pLsW1GBQagP",
        "colab_type": "text"
      },
      "source": [
        "###package and Modules\n",
        "\n",
        "**  package**;- collection of modules\n",
        "** sub packages**;- its part of main package\n",
        "module a single pythin file contains set of opperations(functions)\n",
        "\n",
        "*package---->sub-package->modules-->functions\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qilp40crQlCB",
        "colab_type": "code",
        "outputId": "402df55e-f498-497c-d5fa-d5b6e09f1aa7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from math import floor as f1\n",
        "f1(123.456)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "123"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jq2umnNxRIqY",
        "colab_type": "code",
        "outputId": "c1d51857-25b5-4264-c679-2a9c541a546e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from math import floor as f1\n",
        "f1(123.456)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "123"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ipzc9PXBRQwJ",
        "colab_type": "code",
        "outputId": "0d973b4c-faf0-4d08-92a9-0438512f3a90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import math\n",
        "math.factorial(5)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "120"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lun0kKtSSe8z",
        "colab_type": "code",
        "outputId": "d3b526cf-5a9b-4134-c345-4f888bab0616",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import random\n",
        "def generaterandomnumbers(n,lb,ub):\n",
        "    for i in range(0,n):\n",
        "      print(random.randint(lb,ub),end=\" \");\n",
        "    return\n",
        "generaterandomnumbers(10,25,200)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "172 78 87 152 143 129 26 44 88 46 "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PhV-NFQ8hAVL",
        "colab_type": "code",
        "outputId": "5f136109-78b1-409e-8b31-98d41d618986",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import random\n",
        "def generaterandomnumbers(n,lb,ub):\n",
        "    for i in range(0,n):\n",
        "      print(random.randrange(lb,ub),end=\" \");\n",
        "    return\n",
        "generaterandomnumbers(10,25,200)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "107 98 74 185 120 50 135 105 126 176 "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6AnNfEwpDPvX",
        "colab_type": "text"
      },
      "source": [
        "## File Handling \n",
        "\n",
        "==> File : Document containing information residing on the permanent storage types - - - - Doc , Pdf , Text , Csv files.\n",
        "\n",
        "   file i/o :  input and output .\n",
        "   \n",
        "   \n",
        "   open() - - - -  open the file\n",
        "   \n",
        "   close () - -  -  close the file\n",
        "   "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U9IYRMDbEg7y",
        "colab_type": "code",
        "outputId": "3e3945ae-ad58-4201-9e0e-1b3e2beb95b5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "#function to create a file and write some data\n",
        "\n",
        "def createFile(filename):\n",
        "  f=open(filename,\"w\")\n",
        "  for i in range(10):\n",
        "    f.write(\"this is %d line\\n\"%i)\n",
        "  print(\"file is created successfully and data is written\") \n",
        "  f.close()\n",
        "  return\n",
        "createFile(\"file1.txt\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "file is created successfully and data is written\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HcPyt3QSGTiJ",
        "colab_type": "code",
        "outputId": "526f2299-c6ce-40d3-c1d2-4968a65b3810",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 208
        }
      },
      "source": [
        "def readfile(filename):\n",
        "    f=open(filename,\"r\")\n",
        "    if f.mode ==\"r\":\n",
        "        x=f.read()\n",
        "        print(x)\n",
        "    f.close()\n",
        "    return\n",
        "readfile(\"file1.txt\")\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "this is 0 line\n",
            "this is 1 line\n",
            "this is 2 line\n",
            "this is 3 line\n",
            "this is 4 line\n",
            "this is 5 line\n",
            "this is 6 line\n",
            "this is 7 line\n",
            "this is 8 line\n",
            "this is 9 line\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M_bev5WHXOfL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# data to append\n",
        "\n",
        "def appenddata(filename):\n",
        "  f=open(filename,\"a\")\n",
        " \n",
        "  f.write(\"new line\")\n",
        "  return\n",
        "appenddata(\"file1.txt\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NzL6CbCraIPe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#count file\n",
        "\n",
        "def dataanalysiswordcount(fiename,word):\n",
        "  f=open(filename,\"r\")\n",
        "  if f.mode==\"r\":\n",
        "    x=f.read()\n",
        "    lst=x.split()\n",
        "  cnt=lst.count(word)\n",
        "  return cnt\n",
        "print(dataanalysiswordcount(\"file1.txt\"))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c54Uh0yzIm73",
        "colab_type": "text"
      },
      "source": [
        "##   regular expression for Indian mobile number\n",
        "\n",
        "^[6-9 ][0-9 ]{9 }$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntRQ8GKXFtGc",
        "colab_type": "code",
        "outputId": "2c31d5de-9762-436f-bae4-9f0946125f95",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "import re \n",
        "def phonenumbervalidate(phone):\n",
        "    pattern='^[6-9][0-9]{9}$|[0][6-9][0-9]{9}$|[+][9][1][6-9][0-9]{9}$'\n",
        "    phone=str(phone)\n",
        "    if re.match(pattern,phone):\n",
        "        return True\n",
        "    return False\n",
        "print(phonenumbervalidate(\"9000091909\"))\n",
        "print(phonenumbervalidate(\"91234919\"))\n",
        "print(phonenumbervalidate(\"09000091909\"))\n",
        "print(phonenumbervalidate(\"+919000091909\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nLYH26qEUGCV",
        "colab_type": "text"
      },
      "source": [
        "## regular expression for email id\n",
        "\n",
        "^[0-9a-z][0-9a-z_.]{4,13}[0-9a-z][@][a-z0-9]{3,18}[.][a-z]{2-4}$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EPAYQ2Kjlh6f",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tlX7nT2GRlYu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OqlQbhQ8VHCz",
        "colab_type": "code",
        "outputId": "5eb7d127-44db-4e9b-a40a-0cb12fcb226d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "import re \n",
        "def validateemailid(email):\n",
        "  pattern=\"^[0-9a-z][0-9a-z_.]{4,13}[0-9a-z][@][a-z0-9]{3,18}[.][a-z]{2-4}$\"\n",
        "  if re.match(pattern,email):\n",
        "    return True\n",
        "  return False\n",
        "print( validateemailid(\"reddymallireddy9701@gmail.com\"))\n",
        "print( validateemailid(\"$reddymallireddy9701@gmail.com\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n",
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDHIZEqyX2Tz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#regular expression - -  - password\n",
        "#parameters: [6-15]\n",
        "#accept lowercase,uppercase,digits,spl symbol ($,@,!,#"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hMNEW4YpZ0Oz",
        "colab_type": "code",
        "outputId": "55344936-32eb-438c-c21a-1c0a0e3e9dca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import re\n",
        "def validatepasword(s):\n",
        "  pattern=\"^[a-zA-Z0-9!@#$]{6,15}$\"\n",
        "  if re.match(pattern,s):\n",
        "    return True\n",
        "  return False\n",
        "print(validatepasword(\"reddy@021367\"))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "34V3q9c9ljBC",
        "colab_type": "code",
        "outputId": "6c9407a7-3a5c-4940-a3a7-e5bd5e4a1431",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        }
      },
      "source": [
        "\n",
        "import re\n",
        "def createFile(filename):\n",
        "  def validateemailid(email):\n",
        "    def phonenumbervalidate(phone):\n",
        "        pattern='^[6-9][0-9]{9}$|[0][6-9][0-9]{9}$|[+][9][1][6-9][0-9]{9}$'\n",
        "          pattern=\"^[0-9a-z][0-9a-z_.]{4,13}[0-9a-z][@][a-z0-9]{3,18}[.][a-z]{2-4}$\"\n",
        "    if re.match(pattern,phone):\n",
        "      if re.match(pattern,email):\n",
        "        f=open(filename,\"w\")\n",
        "      for i in range(10):\n",
        "        f.write(\"this is %d line\\n\"%i)\n",
        "  print(\"file is created successfully and data is written\") \n",
        "  f.close()\n",
        "  return\n",
        "  return True\n",
        "  return False\n",
        "\n",
        "createFile(\"file1.txt\")\n",
        "print(phonenumbervalidate(\"9000091909\"))\n",
        "print( validateemailid(\"reddymallireddy9701@gmail.com\"))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-29-1d52c1ac0bcc>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    pattern=\"^[0-9a-z][0-9a-z_.]{4,13}[0-9a-z][@][a-z0-9]{3,18}[.][a-z]{2-4}$\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ipWORkpQOQqO",
        "colab_type": "text"
      },
      "source": [
        "##Introduction to OOP in python\n",
        "\n",
        "one of the popular apporoach to solve a programming problem creating an objects. This is known as \" Object Oriented Programming\" \n",
        "\n",
        "1. Attributes (name,age,colour)\n",
        "2.Behaviour(learn,study,sing,dance)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aLtarFDlQojD",
        "colab_type": "code",
        "outputId": "9ed4f73e-a2e9-491b-f7cf-1b3bca73782a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "def test():\n",
        "  print('Test() for function')\n",
        "  return\n",
        "test()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test() for function\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kag48v_uPtWI",
        "colab_type": "code",
        "outputId": "3c3bb12a-68e6-4b1b-c5b7-16e4ffb0836a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "class Demo:\n",
        "  def test(self):\n",
        "    print(\"test() for the class and method\")\n",
        "    return\n",
        "obj=Demo()\n",
        "obj.test()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test() for the class and method\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3YwmJZEwREwY",
        "colab_type": "code",
        "outputId": "1c874933-e904-4ef4-c29b-2fc1b50793f4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "class Demo1:\n",
        "  def fact(self,n):\n",
        "    fact=1\n",
        "    while(n!=0):\n",
        "      fact=fact*n\n",
        "      n=n-1\n",
        "      \n",
        "    return fact\n",
        "p1=Demo1()\n",
        "print(p1.fact(9))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "362880\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PGFn5tF_UDGU",
        "colab_type": "code",
        "outputId": "3257c2a0-f41c-4642-8223-692dd82c09ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "class Demo2:\n",
        "  def __init__(self,p1,p2):\n",
        "    self.p1=p1\n",
        "    self.p2=p2\n",
        "    \n",
        "    return p1+p2\n",
        " \n",
        "c1=Demo2(10,20)\n",
        "print(c1.add(100,200))\n",
        "    \n",
        "   "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-f7b6f38bd17c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mp1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mp2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mc1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDemo2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: __init__() should return None, not 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V_eYBnFPOjU3",
        "colab_type": "code",
        "outputId": "bcc8daa2-22ed-42ac-99bd-f774481406b5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import numpy as np\n",
        "lst = [1,2,3,4]\n",
        "array = np.array(lst)\n",
        "print(array)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 2 3 4]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3jaCJEGvPHd9",
        "colab_type": "code",
        "outputId": "5c0d37fb-67cf-4195-9f7e-9a035c7cee5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "a1=np.array([(1,2,3,),(4,5,6)])\n",
        "print(a1.shape)\n",
        "a2=np.array([(1,2),(4,5,6)])\n",
        "print(a2.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2, 3)\n",
            "(2,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YK36iXQ5PSpE",
        "colab_type": "code",
        "outputId": "7a1705ba-6581-46eb-a01d-3658b9e5f1c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "\n",
        "a1=np.array([(1,2,3,),(4,5,6)])\n",
        "print(a1)\n",
        "a1.reshape(3,2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1, 2],\n",
              "       [3, 4],\n",
              "       [5, 6]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y4p7BxUwPY3d",
        "colab_type": "code",
        "outputId": "4db7e479-b760-47b7-b396-393a1d662c97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "\n",
        "a1=np.array([1,2,3])\n",
        "a2=np.array([4,5,6])\n",
        "print(np.hstack((a1,a2)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 2 3 4 5 6]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yzsXa9dbPdhK",
        "colab_type": "code",
        "outputId": "92033b59-8c3e-4dbf-9f0e-77c97bb9a745",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "\n",
        "a1=np.array([1,2,3])\n",
        "a2=np.array([4,5,6])\n",
        "print(np.vstack((a1,a2)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oB0YRopYPwNN",
        "colab_type": "code",
        "outputId": "c3879e30-cb4f-48b0-aa56-e6387b7878cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "A = np.matrix(np.ones((4,4),dtype = np.int64))\n",
        "np.asarray(A)[2] = 5\n",
        "print(A)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 1 1 1]\n",
            " [1 1 1 1]\n",
            " [5 5 5 5]\n",
            " [1 1 1 1]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SK8eFyRmStcu",
        "colab_type": "text"
      },
      "source": [
        "#Indexing and slicing of numpy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-NM4vXZ4S44h",
        "colab_type": "code",
        "outputId": "2fbc9b85-48b3-4a39-de5e-121f54149e16",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(a1)\n",
        "             \n",
        "            "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0s-Tbr0TSdG",
        "colab_type": "code",
        "outputId": "43c8589c-5015-4b8d-c191-3979976b0355",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(\"first row :\",a1[0])\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "first row : [1 2 3]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Xb9LxjSTnmq",
        "colab_type": "code",
        "outputId": "a3582300-44b6-4272-ba4a-ca9d7078c50b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(\"second row :\",a1[1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "second row : [4 5 6]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VxTBuAzyTzUY",
        "colab_type": "code",
        "outputId": "5df852cf-5588-4f16-c9bc-ae8fa39477d3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(\"slicing column :\",a1[:,1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "slicing column : [2 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YHaa9R2tUAdi",
        "colab_type": "code",
        "outputId": "2657f829-c055-484a-ad11-67ed6b95ebc6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(\"slicing last column :\",a1[:,2])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "slicing last column : [3 6]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-uw6d6rZULkO",
        "colab_type": "code",
        "outputId": "5a20b088-a3b0-4471-a4f5-ebc6711a8641",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "a1=np.array([(1,2,3),(4,5,6)])\n",
        "print(\"row and column :\",a1[1,:1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "row and column : [4]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NvZAh9AGUiU-",
        "colab_type": "code",
        "outputId": "002cf5a6-6464-4c81-ca2e-56d46e0fa0f9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        }
      },
      "source": [
        "#maths operations\n",
        "#max\n",
        "#min\n",
        "#mean\n",
        "#median\n",
        "\n",
        "a1=np.random.normal(5,1,10)\n",
        "print(a1)\n",
        "print(\"min value=\",np.min(a1))\n",
        "print(\"max value=\",np.max(a1))\n",
        "print(\"mean value=\",np.mean(a1))\n",
        "print(\"median value=\",np.median(a1))\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4.21337438 4.85345235 2.95043583 5.73062093 5.58358233 4.51384207\n",
            " 3.78360964 4.05351758 5.3864589  4.34889825]\n",
            "min value= 2.9504358288299413\n",
            "max value= 5.730620932186899\n",
            "mean value= 4.541779225628038\n",
            "median value= 4.43137015862231\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Omj6HXlUuwc",
        "colab_type": "code",
        "outputId": "1c02a3db-86fa-4f32-eab4-cd642bdf4ce3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "c1=np.array([1,2])\n",
        "c2=np.array([4,5])\n",
        "np.dot(c1,c2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QBm2PL9LXs2V",
        "colab_type": "code",
        "outputId": "97d8d4db-1f66-4f6b-a573-6623864e13c2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "c1=np.array([(1,2),(3,4)])\n",
        "c2=np.array([(3,4),(1,2)])\n",
        "np.dot(c1,c2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5,  8],\n",
              "       [13, 20]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ga-1S1cOY4rl",
        "colab_type": "code",
        "outputId": "176475ea-14ee-411f-9ab4-8c3a7a4b8396",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "c1=np.array([(1,5),(3,6)])\n",
        "c2=np.array([(1,3),(1,2)])\n",
        "np.matmul(c1,c2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 6, 13],\n",
              "       [ 9, 21]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ih4U9vmkcwjU",
        "colab_type": "text"
      },
      "source": [
        "##pandas basic"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g8NlRQCDdUO-",
        "colab_type": "code",
        "outputId": "c5cba1b9-3c1c-4596-edf0-1d6e2553bfef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        }
      },
      "source": [
        "import pandas as pd\n",
        "dict = {\"Name\":[\"arjun\",\"rakeshprabhas\",\"harsha\",\"zombie\",\"yuvi\"],\n",
        "        \"EmailId\":[\"arjun@gmail.com\",\"rakeshprabhas@gmail.com\",\"harsha@gmail.com\",\"zombie@gmail.com\",\"yuvi@gmail.com\"],\n",
        "        \"MobileNumber\":[181,984,999,143,985]}\n",
        "b=pd.DataFrame(dict)\n",
        "b.index=[\"01\",\"02\",\"03\",\"04\",\"05\"]\n",
        "\n",
        "print(b)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             Name                  EmailId  MobileNumber\n",
            "01          arjun          arjun@gmail.com           181\n",
            "02  rakeshprabhas  rakeshprabhas@gmail.com           984\n",
            "03         harsha         harsha@gmail.com           999\n",
            "04         zombie         zombie@gmail.com           143\n",
            "05           yuvi           yuvi@gmail.com           985\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "elrq8Zy9uuwd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}